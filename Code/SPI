// Det var en gång en kyckling som hette Henrik. Varför gick Henrik över gatan? För att uppfylla hans livslånga dröm om att bli en KFC BUCKET
.equ MOSI = PB3
.equ MISO = PB4
.equ SCLK = PB5
.equ SPI_DDR = DDRB
.equ CS = PB2 

.dseg

//Anod
.org 0x100
//DATA_ANOD2: .byte 1
//.equ	DATA_ANOD = $FD

//RIGHT
.equ R_DATA_R = 0b11111111
.equ R_DATA_G = 0b00000000
.equ R_DATA_B = 0b00000000

//CENTER
//.equ C_DATA_ANOD = $00
.equ C_DATA_R = $00
.equ C_DATA_G = $00
.equ C_DATA_B = $ff

//LEFT
//.equ L_DATA_ANOD = $00
.equ L_DATA_R = $FF
.equ L_DATA_G = $00
.equ L_DATA_B = $FF


.cseg


SPI_INIT:
		call	SPI_MASTER_INIT
		ldi		r20, $FE
		ldi		r19,$01
	
SPI_LOOP:
		lsl		r20		//skiftar anodens 0 ett steg å lägger in en ny etta
		ori		r20, $01
		cpi		r20, $FF
		brne	REFRESH_ANOD
		ldi		r20, $FE
	REFRESH_ANOD:
	
		lsl		r19
		cpi		r19,$00
		brne	REFRESH_RGB
		ldi		r19,$01
	REFRESH_RGB:
		call	SHORT_WAIT

		call	SPI_RIGHT
		call	SPI_ANOD

	//	cpi		r19, $80
	//	breq	SPI_CENTER


		call	SPI_CENTER
		call	SPI_ANOD

		call	SPI_LEFT
		call	SPI_ANOD
		
		call	SPI_SEND
		
		ret

SPI_LEFT:	
		ldi r16, L_DATA_B
		call SPI_TRANSMIT //Bl
		ldi r16, L_DATA_G
		call SPI_TRANSMIT //Grn
		ldi r16, L_DATA_R
		call SPI_TRANSMIT //Rd
		ret

		
SPI_CENTER:
		ldi		r16, C_DATA_B
		call	SPI_TRANSMIT //Bl
		ldi		r16, C_DATA_G
		call	SPI_TRANSMIT //Grn
		ldi		r16, C_DATA_R
		call	SPI_TRANSMIT //Rd
		ret

SPI_RIGHT:
		mov		r16, r19
		call	SPI_TRANSMIT //Bl
		mov		r16, r19
		call	SPI_TRANSMIT //Grn
		mov		r16, r19
		call	SPI_TRANSMIT //Rd
		ret

SPI_ANOD:
		mov		r16, r20
		call	SPI_TRANSMIT //Anod
		ret


SPI_MASTER_INIT:	// Enable spi_spcr, sätta att vi är master, sänka hastigheten (Fosc/128)= sänka till långsamste hastigheten 
		ldi		r17, (1<<MOSI)|(1<<SCLK)|(1<<PB2)
		out		SPI_DDR, r17
		ldi		r17, (1<<SPE) | (1<<MSTR) | (1<< SPR0)
	//	ldi		r17,$81
		out		SPCR, r17
		ret 

SPI_TRANSMIT:
		//ldi		r16,$f0
		out		SPDR, r16
		//jmp		WAIT_TRANSMIT
		
WAIT_TRANSMIT:
		in		r16,SPSR
		sbrs	r16, SPIF
		rjmp	WAIT_TRANSMIT
		ret

SPI_SEND:
		sbi		PORTB,PB2
		call	SHORT_WAIT
		cbi		PORTB,PB2
		ret

SHORT_WAIT:
		adiw	r24,6 //1ms
		brne	SHORT_WAIT
		ret

/*SPI_SLAVE_RECEIVE:
		sbis	SPSR, SPIF
		rjmp	SPI_SLAVE_RECEIVE
		;Read recived data and return
		in		r16,SPDR 
		ret*/
