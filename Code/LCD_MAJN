		jmp INIT  
	
		.include "TWI.inc"

.dseg 

		LCD_DATA: .byte 1
		LCD_DATA2: .byte 1 

.cseg  

		.equ ADDR_LCD = $20 
		.equ SLA_LCD_W = (ADDR_LCD << 1) | 0 
		TEXTONE: .db "NEW GAME STARTED", $00
		TEXTTWO: .db "   GAME OVER!   ", $00
		.equ SLA_LCD_R = (ADDR_LCD << 1) | 1 
		.equ FN_SET = $2B 
		.equ E_MODE = $06
		.equ DISP_ON = $0F
		.equ LCD_CLR = $01
		.equ E = $01
		.equ HOME = $02
		.equ RS = PB0

INIT: //RÄTT!

		call TWI_INIT
		call LCD_INIT
		jmp MAIN

MAIN: //RÄTT!

		call LCD_GAMESTART //"NEW GAME STARTED" TEXT
		//call LCD_GAMEOVER //"GAME OVER!" TEXT 
		call END

END: //RÄTT!

		rjmp END

LCD_GAMESTART: //RUTIN FÖR "GAME START"

		ldi ZH, HIGH(TEXTONE*2)
	    ldi ZL, LOW(TEXTONE*2) 

		call LCD_LINE_PRINT

		ret 

LCD_GAMEOVER: //RUTIN FÖR "GAME OVER!"

        ldi ZH, HIGH(TEXTTWO*2)
		ldi ZL, LOW(TEXTTWO*2)

		call LCD_LINE_PRINT

		ret

LCD_LINE_PRINT: //RÄTT!

		 call LCD_HOME
		 call LCD_PRINT 
		 ret

LCD_PRINT: 

		lpm r16, Z+
		cpi r16, $00
		breq LCD_PRINT_DONE
		call LCD_ASCH 
		rjmp LCD_PRINT

LCD_PRINT_DONE: //RÄTT!

		ret

LCD_ASCH: //RÄTT! 

		call LCD_SEND_PREP

		lds r16, LCD_DATA
		ori r16, $01
		sts LCD_DATA, r16 

		lds r16, LCD_DATA2
		ori r16, $01 
		sts LCD_DATA2, r16

		call LCD_SEND

		ret 
	
LCD_COMMAND: //RÄTT!

		call LCD_SEND_PREP

		lds r16, LCD_DATA
		andi r16, $FE
		sts LCD_DATA, r16

		lds r16, LCD_DATA2
		andi r16, $FE
		sts LCD_DATA2, r16 

		call LCD_SEND

		ret 

LCD_WRITE: //RÄTT!

		sts DATA, r16 
		ldi r20, $20 //Var r18 innan!
		call TWI_SEND 
		ret 

//////////////////////////////////////////////////////////////////////////////

LCD_INIT: //RÄTT!

		call LCD_WAIT 
		call LCD_WAIT
		ldi r16, $20 //alt $30
		sts LCD_DATA, r16
		call LCD_WRITE4 
		ldi r16, $2C
		call LCD_COMMAND
		ldi r16, DISP_ON
		call LCD_COMMAND
		ldi r16, $01
		call LCD_COMMAND
		call LCD_WAIT
		ldi r16, E_MODE
		call LCD_COMMAND
		call LCD_HOME
		ret 
	
////////////////////////////////////////////////////////////////////////////// 

LCD_WAIT: //RÄTT!

		push r24
		push r25
		ldi r24, $FF
		ldi r25, $CF

LCD_W1: //RÄTT!

		sbiw r24, 1
		brne LCD_W1
		pop r25
		pop r24
		ret         

LCD_CLEAR: 

		ldi r16, LCD_CLR

		call LCD_COMMAND

		call LCD_WAIT

		ret

LCD_HOME: //RÄTT!

		ldi r16, HOME

		call LCD_COMMAND

		ret

LCD_SEND_PREP: //RÄTT!

		mov r17, r16

		andi r16, $FD 
		ori r16, $08 
		sts LCD_DATA, r16

		swap r17

		andi r17, $FD
		ori r17, $08 
		sts LCD_DATA2, r17

		ret


LCD_SEND: //RÄTT!

		call LCD_WRITE4

		lds r16, LCD_DATA2
		sts LCD_DATA, r16 

		call LCD_WRITE4

		ret

/////////////////////////////////////////////////////////////////////////////////////////////

LCD_WRITE4: //RÄTT!

        call LCD_E_LOW
        call LCD_E_HIGH
		call LCD_E_LOW

		ret

LCD_E_LOW: //RÄTT!

		lds r16, LCD_DATA
		andi r16, $FB //NO- LIST: $DF
		call LCD_WRITE

		ret

LCD_E_HIGH: //RÄTT!

		lds r16, LCD_DATA
		ori r16, $0C//PROBLEM HÄR! NO- LIST: $04, $0C, $20 
		call LCD_WRITE

		ret
