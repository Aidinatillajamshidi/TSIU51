// Lägger dessa högst upp för bättre kodstruktur
.equ ADDR_RIGHT8 = $25 // ADDR_RIGHT8 e lika med                                                                                                                425
.equ SLA_W        =(ADDR_RIGHT8 << 1) | 0
.equ SLA_R        =(ADDR_RIGHT8 << 1) | 1
.equ SCL = PC5
.equ SDA = PC4
.equ LEFT8    = $48
.equ READ_LEFT8    = $49
.equ RIGHT8    = $4A    
.equ READ_RIGHT8 = $4B
.equ ROTLED_READ = $4D
.equ ROTLED_WRITE = $4C
 
 .dseg

 DATA: .byte 1
.cseg

 COUNTER_TABLE:
		.db	$3F, $6, $4B, $47, $66, $6D, $7D, $7, $7F, $67, $77, $7C, $39, $5E, $79, $71, $00


// HW_INIT behövs inte då david kortet har inbyggda pullups med automatisk port initiering på ingångara.

// Underrutiner:
//////////////////////////////////////////// START



/*COUNTER:
		push XH
		push XL
		subi r16,''
		ldi XL,HIGH(COUNTER_TABLE*2)
		ldi XH,LOW(COUNTER_TABLE*2)
		add XL,r16
		brcs CLEAR_CARRY
		lpm r17, X
		pop XL
		pop XH
		ret
	

GET_CHAR_TABLE:
		ldi ZL,HIGH(COUNTER_TABLE*2)
		ldi ZH,LOW(COUNTER_TABLE*2)

COUNTER_PLACEHOLDER:
		lpm r16, Z+
		cpi r16, 0
		breq HEX_RETURN
		sts DATA,r16
		call LEFT_SEGMENT
		call DELAY
		jmp COUNTER_PLACEHOLDER

HEX_RETURN:
		ret
		*/
ROT_LED:
		call START
		ldi	r16,ROTLED_WRITE
		call TWI_SEND_BYTE
		ldi r16,0b11111100
		call TWI_SEND_BYTE
		call	STOP
		ret

GET_CHAR_TABLE:
		ldi ZL,HIGH(COUNTER_TABLE*2)
		ldi ZH,LOW(COUNTER_TABLE*2)

Counter_seg:
		lpm r16, Z+
		sts DATA, r16
		call DELAY
		jmp TWI_SEND
		//	lds r16, DATA  


TWI_SEND:
      
		//call	START
		
		call	LEFT_SEGMENT
		call	DELAY
		call	RIGHT_SEGMENT
		// call	STOP
		jmp		END_ALL
		

LEFT_SEGMENT:
		call	START
		ldi     r16,LEFT8
        call    TWI_SEND_BYTE
		ldi		r16,$5E
		call    TWI_SEND_BYTE
        call    STOP
		ret

RIGHT_SEGMENT:
		call	START
		ldi     r16,RIGHT8
        call    TWI_SEND_BYTE
		ldi		r16,$3f
		//lds		r16, DATA
		call    TWI_SEND_BYTE
		call    STOP
		ret

TWI_SEND_BYTE:
		clr     r21
		ldi		r21,8
TWI_NOT_DONE:  
		lsl     r16
        brcc    TWI_SDL
TWI_SDH:
        call    SDH
        jmp     TWI_RET
TWI_SDL:
        call	SDL
TWI_RET:
		dec		r21
        cpi     r21,0
        brne    TWI_NOT_DONE
        call    SDH // Gör våran ack
		ret

//VALUE_LOOP:
        //ldi        r17, LEFT8 // "Vi vill aktivera. Addressen där 7 seg disp ligger"

START:
    sbi DDRC,SDA
    call DELAY
    sbi DDRC,SCl
    call DELAY
    ret
STOP:
    sbi DDRC,SDA
    call DELAY
    cbi DDRC, SCL
    call DELAY
    cbi DDRC, SDA
    call DELAY
    ret
SDL:
    sbi DDRC, SDA
    call DELAY
    cbi DDRC, SCL
    call DELAY
    sbi DDRC, SCL
    call DELAY
    ret
SDH:
    cbi DDRC, SDA
    call DELAY
    cbi DDRC, SCL
    call DELAY
    sbi DDRC, SCL
    call DELAY
    ret

DELAY:
    sbiw r24, 4  //4ms
    brne DELAY
    ret
 
 END_ALL:
 jmp END_ALL

// Misc.
//LCD_WRITE4:
//LCD_WRITE8:
