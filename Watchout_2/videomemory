.dseg

.org 0x150
VMEM: .byte 96 

.org 0x200
CHECK_JUMP:			.byte 1
CHECK_ROCK:			.byte 1

STORE_SPEED:		.byte 1
DATA:				.byte 1
LCD_DATA:			.byte 1
LCD_DATA2:			.byte 1 
HIT:				.byte 1
ENTAL: .byte 1
TIOTAL: .byte 1

.cseg

	
		
VMEM_INIT: // Förbereder pekaren
		ldi		ZH, HIGH(VMEM)
		ldi		ZL, LOW(VMEM)
		ldi		YH,HIGH(VMEM)
		ldi		YL,LOW(VMEM)
		ret

SRAM_CLEAR:
		push	r17
		push	r18
		push	ZH
		push	ZL
		ldi		r17, 150
		ldi		r18, $00
		ldi		ZH, HIGH(VMEM)
		ldi		ZL, LOW(VMEM) 
	
SRAMCLEARLOOP:

		dec		r17
		st		Z+, r18
		cpi		r17, 0
		brne	SRAMCLEARLOOP
		pop		ZL
		pop		ZH
		pop		r18
		pop		r17
		ret 


		
GAME_OVER:
		
		push	r16
		push	r17
		
		ldi		r16, $00
		ldi		r17, $FF

		sts		vmem+92, r16
		sts		vmem+93, r16
		sts		vmem+94, r17
	
		sts		vmem+88, r16
		sts		vmem+89, r16
		sts		vmem+90, r17

		sts		vmem+96, r16
		sts		vmem+97, r16
		sts		vmem+98, r17

		pop		r17
		pop		r16
		ret
		
		ret 

CLEAR_SCREEN:
		push	r18
		push	r16
		ldi		r18, 72

SCREEN_LOOP:

		ldi		r16, $00
		dec		r18
		cpi		r18,0
		call	SPI_TRANSMIT
		brne	SCREEN_LOOP
		pop		r16
		pop		r18
		ret

FOUR_STEP:		//lägger rätt anod data i var 4 byte 
		inc		r28
		inc		r24
		cpi		r24,4
		brne	FOUR_STEP
		clr		r24

FOUR_STEP_LOOP:	
		st		Y, r23
		inc		r17
		cpi		r17,3
		brne	FOUR_STEP
		clr		r17

		lsl		r23
		brcc	SKIP_ORI
		ori		r23,0b00000001
	SKIP_ORI:
		cpi		r28, $B3
		brlo	FOUR_STEP
		call	RESET_POINTER
		ret

ROCK:		//lägger rätt anod data i var 4 byte 
		ldi		r25, 0b00000001
		push	r16
		ldi		r16,$98
		sts		CHECK_ROCK, r16
		pop		r16
		ret

ROCK_MOVE:
		lds		YL, CHECK_ROCK
		call	LOAD_ROCK
		
ROCK_STEP:
		inc		r28
		inc		r24
		cpi		r24,10
		brne	ROCK_STEP
		call	LOAD_ROCK
		clr		r24
		lsl		r25
		inc		r17

		cpi		r17,9
		brne	SECOND_SCREEN
		ldi		r16, $90
		sts		CHECK_ROCK, r16
		ori		r25,0b00000001
		
	SECOND_SCREEN:
		cpi		r17,18
		brne	THIRD_SCREEN

		ldi		r16, $94 //$76
		sts		CHECK_ROCK, r16
		ori		r25,0b00000001
		
	THIRD_SCREEN:
		cpi		r17,27
		brne	DONE

		ldi		r16, $98
		sts		CHECK_ROCK, r16
		ori		r25, 0b00000001
		clr		r17 
		call	SEG_7
	DONE: 
		ret
		
LOAD_ROCK:		

		st		Y, r25
		inc		r28
		st		Y,r25
		inc		r28
		ret
