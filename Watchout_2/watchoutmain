jmp HW_INIT


.org OC2Baddr	//0x0020							// Avbrottsvektor till timer1
		jmp	AVBROTTSRUTIN					// Rutinen som ska utföras vid avbrottet, kan döpas till vad du vill såklart

.org 0x0020		// OC2Baddr
		jmp FPS_RUTIN

.dseg

.include "SPI.inc"
.include "AVBROTT.inc"
.include "AVBROTT_ALEX.inc"
.include "CHARACTER.inc"
.include "VIDEOMINNE.inc"
.include "LCD.inc"
.include "TWI.inc"
.include "SPEAKER.inc"
.include "START_END.inc"
.include "7_SEG.INC"



// .db  $7F, $BF, $DF, $EF, $F7, $FB, $FD, $FE

.equ	IM_SPEED = 2
.equ	ADDR_LCD = $20 
.equ	SLA_LCD_W = (ADDR_LCD << 1) | 0 
.equ	SLA_LCD_R = (ADDR_LCD << 1) | 1 
.equ	FN_SET = $2B 
.equ	E_MODE = $06
.equ	DISP_ON = $0F
.equ	LCD_CLR = $01
.equ	E = $01
.equ	HOME = $02
.equ	RS = PB0

.equ ADDRESS_1 = $25
.equ ADDRESS_2 = $24 // LEFT


TEXTONE: 
		.db		"  GAME STARTED  ", $00

TEXTTWO: 
		.db		"   GAME OVER!    ",$00

TEXTTHREE:
		.db		"PRESS R TO START",$00

.cseg
////////////////////////////////////// INIT ////////////////////////////////////////////
HW_INIT:
		
		call	TWI_INIT
		clr		r16
		call	SPI_MASTER_INIT
		clr		r16
		call	AVBROTTSRUTIN_INIT
		clr		r16
		call	FPS_INIT	
		clr		r16
		clr		r17
		call	VMEM_INIT
		call	SRAM_CLEAR
		call	CLEAR_SCREEN

////////////////////////////////////// MAIN INIT ////////////////////////////////////////////

MAIN_INIT:
		push	YL
		push	r23
		ldi		r23, 0b11111110
		ldi		r28, $53
		call	FOUR_STEP
		pop		YL
		pop		r23

GAME_INIT:
		
		call	LCD_READY
	//	call	NEW_GAME
		call	BUTTON_R
		call	LCD_GAMESTART
		
		clr		r25
		
		call	LOAD_FLOOR
		call	LOAD_DINO
		call	ROCK

		sei

GAME_RUN:
		sbis	PIND,PD1
		call	DINO_JUMP
	 // push	r17
	//	lds		r17,hit
	//	cpi		r17,1
//		pop		r17*/
	//	brlo	GAME_RUN
		/*clr		r17
		clr		r16	
		lds		r16, HIT
		sts		HIT, r17
		cpi		r16, 1*/
		jmp 	GAME_RUN


		END:
	//	cli 

		call	GAME_OVER
		call	LCD_GAMEOVER

		ldi		r18,15
	DELAY_LOOP:
		call	DELAY_HALFHALF
		dec		r18
		brne	DELAY_LOOP
		nop

		jmp		GAME_INIT

/////////////////////////////////////// DELAY ////////////////////////////////////////////
RESET_POINTER:
		clr		r28
		ldi		r28, 0x50
		ret


//Delay 0.25 second
DELAY_HALFHALF:                 ; For CLK(CPU) = 1 MHz

		push	r20
		push	r21
		push	r22

	    ldi     r20,5 ; One clock cycle;
DELAY1_THREE:
		ldi     r21,245    ; One clock cycle
DELAY2_THREE:
		ldi     r22,255     ; One clock cycle
DELAY3_THREE:
		dec     r22            ; One clock cycle
		nop                     ; One clock cycle
		brne    Delay3_THREE          ; Two clock cycles when jumping to Delay3, 1 clock when continuing to DEC

		dec     r21            ; One clock cycle
		brne    Delay2_THREE          ; Two clock cycles when jumping to Delay2, 1 clock when continuing to DEC

		dec     r20            ; One clock Cycle
		brne    Delay1_THREE          ; Two clock cycles when jumping to Delay1, 1 clock when continuing to RET
	
		clr		r20
		clr		r21
		clr		r22
		pop		r22
		pop		r21
		pop		r20
	
		ret
